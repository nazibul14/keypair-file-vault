#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
let {app} = require('../app');
let http = require('http');
let https = require('https');
let fs = require('fs');

let crtpath = process.env.CRT_PATH || '';
let privatekeypath = process.env.PRIVATE_KEY_PATH || '';

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP/HTTPS server.
 */

let server = null;

if (crtpath != '' && privatekeypath != '' && fs.existsSync(crtpath) && fs.existsSync(privatekeypath)) {
  try {
    let options = {cert: fs.readFileSync(crtpath), key: fs.readFileSync(privatekeypath)};

  } catch (e) {
    console.log('cert read access error')
  }
  server = https.createServer(options, app);
} else {
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`Server running at http://localhost:${addr.port}`);
}
